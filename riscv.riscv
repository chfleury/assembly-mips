.data # Tell the assembler we are defining data not code
	fimLinha:  # Label this position in memory so it can be referred to in our code 
  	.string "\n"
	ADD:  # Label this position in memory so it can be referred to in our code 
  	.string "ADD: "
	SUB:  # Label this position in memory so it can be referred to in our code 
  	.string "SUB: "
	AND:  # Label this position in memory so it can be referred to in our code 
  	.string "AND: "
	OR:  # Label this position in memory so it can be referred to in our code 
  	.string "OR: "
	XOR:  # Label this position in memory so it can be referred to in our code 
  	.string "XOR: "
	MASK:  # Label this position in memory so it can be referred to in our code 
  	.string "MASK: "
	SLL:  # Label this position in memory so it can be referred to in our code 
  	.string "SLL("
	SRL:  # Label this position in memory so it can be referred to in our code 
  	.string "SRL("
	parenteses:  # Label this position in memory so it can be referred to in our code 
  	.string "): "

.text
	main:
		jal lerInteiro # chamando a funcao ler inteiro
		mv s2, a0 # mvndo o valor para s2

		jal lerInteiro # chamando a funcao ler inteiro
		mv s4, a0 # mvndo o valor para s4

		jal lerInteiro # chamando a funcao ler inteiro
		mv s5, a0 # mvndo o valor para s5

		la s6, ADD  # carregando a string para o registrador s6
		add s3, s2, s4 # fazendo a operação e salvando no registrador s3
		jal printarOperacao # chamando a função printarOperação passando s6 e s3 como parametros

		la s6, SUB  # carregando a string para o registrador s6
		sub s3, s2, s4 # fazendo a operação e salvando no registrador s3
		jal printarOperacao # chamando a função printarOperação passando s6 e s3 como parametros

		la s6, AND  # carregando a string para o registrador s6
		and s3, s2, s4 # fazendo a operação e salvando no registrador s3
		jal printarOperacao # chamando a função printarOperação passando s6 e s3 como parametros

		la s6, OR  # carregando a string para o registrador s6
		or s3, s2, s4 # fazendo a operação e salvando no registrador s3
		jal printarOperacao # chamando a função printarOperação passando s6 e s3 como parametros

		la s6, XOR  # carregando a string para o registrador s6
		xor s3, s2, s4 # fazendo a operação e salvando no registrador s3
		jal printarOperacao # chamando a função printarOperação passando s6 e s3 como parametros
		
		la s6, MASK  # carregando a string para o registrador s6
		andi s3, s5, 31  # faz um and entre s5 e 31 e salva em s3
		jal printarOperacao # chamando a função printarOperação passando s6 e s3 como parametros
	

		# parametros do printarShift: s6, string( SLL ou SRL), s3: resultado do and da mascara, s3, resultado do shift
		la s6, SLL  # carregando a string para o registrador s6
		sll s3, s2, s3  # fazendo a operação e salvando no registrador s3
		jal printarShift # chamando a função de printarShift
		
		la s6, SRL  # carregando a string para o registrador s6
		srl s3, s4, s3 # fazendo a operação e salvando no registrador s3
		jal printarShift # chamando a função de printarShift

		j finalizarPrograma # jump para terminar o programa

	printarFimLinha:
		li a7, 4 # codigo para printar string
		la a0, fimLinha # carregando o fimLinha para a0
		ecall # printando fimLinha

		jr ra # voltando
		
	finalizarPrograma:
		li a7, 10  # código do sitema para finalizar programa
		ecall # finalizanddo

	printarOperacao:
		addi sp, sp, -4 # alocando 4 bytes na stack
		sw ra, 0(sp) # armazenando a palvra ra na stack

		li a7, 4 # codigo para printar string
		mv a0, s6 # mvndo o valor do parametro s6 para a0
		ecall # printando

		li a7, 1 # codigo para printar inteiro
		mv a0, s3 # mvndo o valor do parametro s3 para a0
		ecall # printando

		jal printarFimLinha # chamando função que printa quebra de linha

		lw ra, 0(sp) # lendo o valor que tinhamos salvo na stack de volta para ra 
		addi sp, sp, 4 # desalocando os 4 bytes da stack

		jr ra # voltando para onde a função foi chamada

	printarShift:
		addi sp, sp, -4 # alocando 4 bytes na stack
		sw ra, 0(sp) # armazenando a palvra ra na stack

		li a7, 4 # codigo para printar string
		mv a0, s6 # mvndo o valor do parametro s6 para a0
		ecall # printando

		li a7, 1 # codigo para printar inteiro
		mv a0, s3 # mvndo o valor do parametro s3 para a0
		ecall # printando

		li a7, 4 # codigo para printar string
		la a0, parenteses  # carregando o valor da string parenteses
		ecall # printando a fecha de parenteses

		li a7, 1 # codigo para printar inteiro
		mv a0, s3 # mvndo o valor do parametro s3 (resultado do shift) para a0
		ecall # printando

		jal printarFimLinha # chamando função para printar quebra de linha

		lw ra, 0(sp) # lendo o valor que tinhamos salvo na stack de volta para ra 
		addi sp, sp, 4 # desalocando os 4 bytes da stack

		jr ra # voltando para onde a função foi chamada

	lerInteiro:
		li a7, 5  # código do sitema para leitura de inteiros
		ecall # lendo o numero
		jr ra	# voltando
		 