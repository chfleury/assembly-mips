.data
	sim: .asciiz "sim\n"
	nao: .asciiz "nao\n"
	invalido: .asciiz "Entrada invalida.\n"

.text
	main:
		li $v0, 5  # código do sitema para leitura de inteiros
		syscall # lendo o numero
		move $t0, $v0 # movendo o valor para $t0
		move $t1, $t0
		jal sqrt

		li $t2, 1
		li $t3, 0

		move $a0, $t1
		li $v0, 1 #codigo do sistema para printar inteiros
		syscall # printando inteiro (resposta)
        # $t0 tem o valor de entrada
		# $t1 tem o valor da raiz quadrada da entrada
		# $t2 começa com 1 e ira iterar até o valor da raiz quadrada ( i )
		# $t3 começa com 0, e ira contar quantos divisores do numero até sua raiz quadrada
		# $t4 vai ter o resultado do resto de cada divisao no loop
		while:
			bgt $t2, $t1, breakWhile # se o valor de i for maior que a raiz quadrada, break

			div $t0, $t2 # divide o input  N por $t0, 
			mfhi $t4 # pega o resto e armazena em $t1

			beq $t4, 0, incrementaContadorDivisores

			j pulaIncremento

			incrementaContadorDivisores:
				addi $t3, $t3, 1

			pulaIncremento:
				addi $t2, $t2, 1
				j while
		breakWhile:
			move $a0, $t3
			li $v0, 1 #codigo do sistema para printar inteiros
			syscall # printando inteiro (resposta)
			beq $t3, 1, printSim

		j printNao

 		printInvalido:
			li $v0, 4  # código do sitema para printar a string
			la $a0, invalido #endereço da string a imprimir no registrador $a
			syscall # printando	
			j terminarPrograma # termina o programa

 		printNao:
			# senão, printa nao
			li $v0, 4  # código do sitema para printar a string
			la $a0, nao #endereço da string a imprimir no registrador $a
			syscall # printando

		j terminarPrograma # vai para o fim da funcao

		printSim:
			li $v0, 4  # código do sitema para printar a string
			la $a0, sim #endereço da string a imprimir no registrador $a
			syscall # printando

		terminarPrograma:
			li $v0, 10 # codigo do sistema para finalizar o programa
			syscall # finalizando

	sqrt:
		loopSQRT:
			div $t3, $t0, $t1   # N/x 
			add $t1, $t3, $t1   # x + N/x 
			div $t1, $t1, 2     # (x + N/x)/2 

			#loop
			add $t4, $t4, 1 
   			blt $t4, 20, loopSQRT 
		jr $ra