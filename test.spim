.data
    zeroFloat: .float 0.00000000
    fimLinha: .asciiz "\n"
    mais: .asciiz "+"
    menos: .asciiz "-"
    mascara: .word 8388607
    array:  .space  16
    hex: .asciiz "0x0"
.text
	main:

	li $v0, 6  # código do sitema para leitura de float
	syscall # lendo o numero (o valor estara em $f0)

    mfc1 $t8 $f0 #store in $t8
    lwc1 $f1, zeroFloat
    add.s $f12, $f0, $f1

	li $v0, 2 #codigo do sistema para printar float
	syscall # printando float


	li $v0, 4  # código do sitema para printar a string
	la $a0, fimLinha #endereço da string a imprimir no registrador $a
	syscall # printando

    #---------------------------------------------------------------------
    # pegando o bit de sinal
    addi  $t0 $zero 1 # adicionando 1 em t0 ( 0000 ... 0001)
    sll  $t0 $t0 31 # shiftando 31 bits pra esquerda ( 1000 ... 0000)
    and  $a0 $t0 $t8 # fazendo AND logico para obter apenas o bit de sinal de acordo com nossa mascara acima
    srl  $a0 $a0 31 # shiftando a0 31 bits para direita para ter somente o bit de sinal  ( 000x ) 
    beq  $a0, 0, imprimeMais
    bne  $a0, 0, imprimeMenos

    imprimeMenos:
        la $a0, menos
        j fimIf

    imprimeMais:
        la $a0, mais
    
    fimIf:
        syscall

	li $v0, 4  # código do sitema para printar a string
	la $a0, fimLinha #endereço da string a imprimir no registrador $a
	syscall # printando


    # ------------------------------------------------------------------------
    # pegar bits 23-30
    addi  $t0 $zero 255 
    sll  $t0 $t0 23
    and  $a0 $t0 $t8
    srl  $a0 $a0 23
    addi  $t3, $zero, 127
    sub $a0, $a0, $t3
    
    #print exponent
    li $v0, 1
    syscall

	li $v0, 4  # código do sitema para printar a string
	la $a0, fimLinha #endereço da string a imprimir no registrador $a
	syscall # printando

# -------------------------------------------------------------------------

  # pegar bits 0-22
    lw $t2, mascara
    add  $t0, $zero, $t2
    and  $a0, $t0, $t8

    
    addi $s3, $zero, 23 # registrador para controlar a qunatidade de vezes que o loop vai rodar

    add $s0, $a0, $zero # armazenando dos dados de $a0 no registrador $s0
    sll $s0, $s0, 8 # fazendo um offset de 8 bits, pois o registrador tem 32 bits
    # e a mantissa tem 23 (representado em 24), assim fazemos que a mantissa passe de:
    # 0000 0000 0111 1111 1111 1111 1111 1111 para 0111 1111 1111 1111 1111 1111 0000 0000

    #printando a string de inicio do hex 0x + um zeo pois como a mantissa so tem 23 bits, vai ser sempre zero o primeiro digito nesse formato de hex
    li $v0, 4  # código do sitema para printar a string
	la $a0, hex #endereço da string a imprimir no registrador $a
    syscall
loop:
    ble $s3, $zero, termina # condicao para finalizar o loop
    rol $s0, $s0, 4             # Fazendo rotate para esquerda e pegando os 4 lsb
    and $s1, $s0, 15            # bitmask para adicionar em $s1 apenas os 4 lsb depois do rotate

    li $v0, 11
    ble $s1, 9, pularSoma        # If s1 <= 9, go to print
    add $s1, $s1, 7   


pularSoma:
    addi $a0, $s1 , 48 # somando 48 para pegar o codigo ascii

    syscall

    addi $s3, $s3, -4

    j loop

    li $v0, 4  # código do sitema para printar a string
	la $a0, fimLinha #endereço da string a imprimir no registrador $a
	syscall # printando

 

  
# -------------------------------------------------------------------------

termina:
	li $v0, 4  # código do sitema para printar a string
	la $a0, fimLinha #endereço da string a imprimir no registrador $a
	syscall # printando

	li $v0, 10 # codigo do sistema para finalizar o programa
	syscall # finalizando