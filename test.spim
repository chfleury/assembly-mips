.data
    zeroFloat: .float 0.00000000
    fimLinha: .asciiz "\n"
    mais: .asciiz "+\n"
    menos: .asciiz "-\n"
    mascara: .word 8388607
    hex: .asciiz "0x0"
.text
	main:

	li $v0, 6  # código do sitema para leitura de float
	syscall # lendo o numero (o valor estara em $f0)

    mfc1 $t1 $f0 # armazenando o float em $t1 como inteiro
    lwc1 $f1, zeroFloat # carregando o zeroFloat no registrador $t1
    add.s $f12, $f0, $f1 # adicionando o float lido em $f0 para $f12 para printar 

	li $v0, 2 # codigo do sistema para printar float
	syscall # printando float que está em $f12


	li $v0, 4  # código do sitema para printar a string
	la $a0, fimLinha #endereço da string a imprimir no registrador $a
	syscall # printando

    #---------------------------------------------------------------------
    # pegando o bit de sinal (31)
    addi  $t0 $zero 1 # adicionando 1 em t0 ( 0000 ... 0001)
    sll  $t0 $t0 31 # shiftando 31 bits pra esquerda ( 1000 ... 0000)
    and  $a0 $t0 $t1 # fazendo AND logico para obter apenas o bit de sinal de acordo com nossa mascara acima
    srl  $a0 $a0 31 # shiftando a0 31 bits para direita para ter somente o bit de sinal  ( 000x ) 
    beq  $a0, 0, imprimeMais # se o bit de sinal for 1, branch para imprimeMais
    bne  $a0, 0, imprimeMenos # se o bit de sinal for 0, branch para imprimeMenos

    imprimeMenos:
        la $a0, menos # adiciona -\n em $a0
        j fimIf # branch para fimIf

    imprimeMais:
        la $a0, mais # adiciona +\n em $a0
    
    fimIf:
        syscall # printando + ou - e quebra de linha

    # ------------------------------------------------------------------------
    # pegar bits 23-30 (expoente)
    addi  $t0 $zero 255 # criando uma mascara para pegar expoente com o valor 255, que em binario fica 1111 1111 
    sll  $t0 $t0 23 # shift de 23 para esquerda da máscara para  deixar no formato 0 11111111 0000000000000000000000
    and  $a0 $t0 $t1 # fazendo and logico para pegar apenas o expoente e armazenando em $a0
    srl  $a0 $a0 23 # shift de 23 para direita para remover os zeros que estavam a direita e ficar apenas com o valor do expoente
    addi  $t3, $zero, 127 # adicionando 127 no reg $t3
    sub $a0, $a0, $t3 # subtraindo 127 do bias
    
    li $v0, 1 # codigo para print de inteiros
    syscall # printando o expoente

	li $v0, 4  # código do sitema para printar a string
	la $a0, fimLinha #endereço da string a imprimir no registrador $a
	syscall # printando

# -------------------------------------------------------------------------
  # pegar bits 0-22 (mantissa)
    lw $t2, mascara # carregando a máscara da mantissa (11111111111111111111111) para $t2 
    add  $t0, $zero, $t2
    and  $a0, $t0, $t1

    
    addi $s3, $zero, 23 # registrador para controlar a qunatidade de vezes que o loop vai rodar

    add $s0, $a0, $zero # armazenando dos dados de $a0 no registrador $s0
    sll $s0, $s0, 8 # fazendo um offset de 8 bits, pois o registrador tem 32 bits
    # e a mantissa tem 23 (representado em 24), assim fazemos que a mantissa passe de:
    # 0000 0000 0111 1111 1111 1111 1111 1111 para 0111 1111 1111 1111 1111 1111 0000 0000

    #printando a string de inicio do hex 0x + um zeo pois como a mantissa so tem 23 bits, vai ser sempre zero o primeiro digito nesse formato de hex
    li $v0, 4  # código do sitema para printar a string
	la $a0, hex #endereço da string a imprimir no registrador $a
    syscall
loop:
    ble $s3, $zero, termina # condicao para finalizar o loop
    rol $s0, $s0, 4             # Fazendo rotate para esquerda e pegando os 4 lsb
    and $s1, $s0, 15            # bitmask para adicionar em $s1 apenas os 4 lsb depois do rotate

    li $v0, 11
    ble $s1, 9, pularSoma        # If s1 <= 9, go to print
    add $s1, $s1, 7   


pularSoma:
    addi $a0, $s1 , 48 # somando 48 para pegar o codigo ascii

    syscall

    addi $s3, $s3, -4

    j loop

    li $v0, 4  # código do sitema para printar a string
	la $a0, fimLinha #endereço da string a imprimir no registrador $a
	syscall # printando

 

  
# -------------------------------------------------------------------------

termina:
	li $v0, 4  # código do sitema para printar a string
	la $a0, fimLinha #endereço da string a imprimir no registrador $a
	syscall # printando

	li $v0, 10 # codigo do sistema para finalizar o programa
	syscall # finalizando